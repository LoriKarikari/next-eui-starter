{"version":3,"file":"static/webpack/static/development/pages/_app.js.36ec73d56068bb9a9837.hot-update.js","sources":["webpack:///./src/components/chrome/breadcrumbs.tsx","webpack:///./src/components/chrome/index.tsx","webpack:///./src/components/link.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport { useRouter } from 'next/router'\nimport { Breadcrumb, EuiHeaderBreadcrumbs } from '@elastic/eui'\n\nconst assetPrefix = process.env.PATH_PREFIX as string\n\n/**\n * This component demonstrates a very simple use of the Next router to\n * render a breadcrumb. It's not particularly useful, but gives an idea.\n */\nexport const Breadcrumbs: FunctionComponent = () => {\n  const router = useRouter()\n\n  const pathToBreadcrumb: { [path: string]: string } = {\n    '/': 'Home',\n    '/page-2': 'Page 2',\n  }\n\n  // router.pathname gives the path on disk, which could be e.g. `/[...slug]`\n  // We also don't want URL fragments to confuse the path -> title lookup.\n  const pathname = router.asPath.replace(/#.*/, '')\n\n  const breadcrumbs: Breadcrumb[] = [\n    {\n      text: pathToBreadcrumb[pathname] || pathname.replace(/^\\//, ''),\n      href: pathname.replace(new RegExp('^' + assetPrefix + '/?'), ''),\n      onClick: (e: React.MouseEvent) => {\n        e.preventDefault()\n\n        router.push(router.pathname)\n      },\n      'data-test-subj': 'breadcrumbsAnimals',\n      className: 'customClass',\n    },\n  ]\n\n  return <EuiHeaderBreadcrumbs breadcrumbs={breadcrumbs} />\n}\n","import React, { FunctionComponent, useRef } from 'react'\n\nimport {\n  EuiHeader,\n  EuiHeaderLogo,\n  EuiHeaderSection,\n  EuiHeaderSectionItem,\n  EuiHeaderSectionItemButton,\n  EuiHorizontalRule,\n  EuiIcon,\n  // @ts-ignore\n  EuiNavDrawer,\n  // @ts-ignore\n  EuiNavDrawerGroup,\n  EuiShowFor,\n} from '@elastic/eui'\n\nimport { buildTopLinks } from '../navigation_links/top_links'\nimport { buildSolutionLinks } from '../navigation_links/solution_links'\nimport { buildExploreLinks } from '../navigation_links/explore_links'\nimport { buildAdminLinks } from '../navigation_links/admin_links'\n\nimport './_index.scss'\nimport { Breadcrumbs } from './breadcrumbs'\nimport SwitchTheme from './SwitchTheme'\nimport { useRouter } from 'next/router'\nimport { buildBrowserPath } from '../link'\n\ninterface EuiNavDrawerStub {\n  toggleOpen: () => void\n}\n\nconst Logo: FunctionComponent = () => <EuiHeaderLogo iconType='logoElastic' href='/' aria-label='Goes to home' />\n\nconst MenuTrigger: FunctionComponent<{ onClick: () => void }> = ({ onClick }) => (\n  <EuiHeaderSectionItemButton aria-label='Open nav' onClick={onClick}>\n    <EuiIcon type='apps' href='#' size='m' />\n  </EuiHeaderSectionItemButton>\n)\n\n/**\n * Renders the UI that surrounds the page content.\n */\nconst Chrome: FunctionComponent = ({ children }) => {\n  // This is an EuiNavDrawer, which isn't a TypeScript module yet\n  const navDrawerRef = useRef<EuiNavDrawerStub>(null)\n\n  const router = useRouter()\n\n  const buildOnClick = (path: string) => () => router.push(buildBrowserPath(path))\n\n  return (\n    <>\n      <EuiHeader className='chrHeader'>\n        <EuiHeaderSection grow={false}>\n          <EuiShowFor sizes={['xs', 's']}>\n            <EuiHeaderSectionItem border='right'>\n              <MenuTrigger onClick={() => navDrawerRef.current!.toggleOpen()} />\n            </EuiHeaderSectionItem>\n          </EuiShowFor>\n\n          <EuiHeaderSectionItem border='right'>\n            <Logo />\n          </EuiHeaderSectionItem>\n\n          <EuiHeaderSectionItem border='right'>{/* <HeaderSpacesMenu /> */}</EuiHeaderSectionItem>\n        </EuiHeaderSection>\n\n        <Breadcrumbs />\n\n        <EuiHeaderSection side='right'>\n          <EuiHeaderSectionItem className='chrHeaderSectionItem'>\n            <SwitchTheme />\n          </EuiHeaderSectionItem>\n        </EuiHeaderSection>\n      </EuiHeader>\n      <EuiNavDrawer ref={navDrawerRef}>\n        <EuiNavDrawerGroup listItems={buildTopLinks(buildOnClick)} />\n        <EuiHorizontalRule margin='none' />\n\n        <EuiNavDrawerGroup listItems={buildExploreLinks(buildOnClick)} />\n        <EuiHorizontalRule margin='none' />\n\n        <EuiNavDrawerGroup listItems={buildSolutionLinks(buildOnClick)} />\n        <EuiHorizontalRule margin='none' />\n\n        <EuiNavDrawerGroup listItems={buildAdminLinks(buildOnClick)} />\n      </EuiNavDrawer>\n      <div className='chrWrap'>{children}</div>\n    </>\n  )\n}\n\nexport default Chrome\n","import React, { FunctionComponent } from 'react'\nimport Link, { LinkProps } from 'next/link'\n\nconst assetPrefix = process.env.PATH_PREFIX as string\n\n/**\n * Builds the correct value to be used for the 'as' argument to the Next router.\n * @param href the route to potentially be prepended.\n */\nexport function buildBrowserPath(href: string): string {\n  return href.startsWith('/') ? assetPrefix + href : assetPrefix + '/' + href\n}\n\n/**\n * In order to support a site-wide path prefix (e.g. GitHub Pages), all usages of\n * Next's `<Link />` need to support the `as` prop. This is tedious, so wrap the\n * component and apply the `as` logic in one place.\n */\nconst NextJsLink: FunctionComponent<LinkProps> = ({ href, ...rest }) => {\n  const path = typeof href === 'object' ? href.pathname! : href\n\n  return <Link href={href} as={buildBrowserPath(path)} {...rest} />\n}\n\nexport default NextJsLink\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AAEA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;;;;;AAGA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AACA;AAEA;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}